{"version":3,"sources":["UserLogin.js","Register.js","App.js","serviceWorker.js","index.js","LoginImage.svg"],"names":["UserLogin","props","state","userName","password","handleChange1","bind","handleChange2","handleClick","e","data","username","this","fetch","method","body","JSON","stringify","headers","response","json","console","log","error","setState","target","value","className","ref","containerRef","src","LoginImage","htmlFor","type","name","placeholder","onChange","onClick","React","Component","Register","email","handleChange3","App","login","rightSide","classList","add","remove","prevState","curr","currentActive","container","changeState","RightSide","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.fdc1387d.chunk.js","sourcesContent":["import React from 'react';\nimport './style.scss';\nimport LoginImage from './LoginImage.svg'\n\nclass UserLogin extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {userName:'', password:''};\n    this.handleChange1 = this.handleChange1.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n   async handleClick(e) {\n   \tconst url = 'http://52.8.227.164/user'\n   \tconst data = {username:this.state.userName, password:this.state.password};\n   \ttry {\n   \t\tconst response = await fetch(url, \n   \t\t{\n   \t\t\tmethod: 'POST',\n   \t\t\tbody: JSON.stringify(data),\n   \t\t\theaders: {\n   \t\t\t\t'Content-Type': 'application/json',\n   \t\t\t}\n   \t\t});\n\n   \t\tconst json = await response.json();\n   \t\tconsole.log('Success', JSON.stringify(json));\n   \t} catch (error) {\n   \t\tconsole.error('Error', error);\n   \t}\n  \n }\n\n handleChange1(e) {\n  this.setState({userName: e.target.value})\n }\n handleChange2(e) {\n  this.setState({password: e.target.value})\n }\n \n\nrender() {\n\treturn (\n\t\t<div className = 'outer-container' ref={this.props.containerRef}> \n\t\t\t<div className = 'header'> Login </div>\n\t\t\t<div className=\"content\">\n\t\t\t<div className=\"image\">\n            \t<img src={LoginImage} />\n          \t</div>\n\t\t\t<div className = 'form'>\n\t\t\t\t<div className = 'form-group'>\n\t\t\t\t\t<label htmlFor=\"username\">Username</label>\n             \t\t<input type=\"text\" value = {this.state.userName}  name=\"username\" placeholder=\"username\" onChange={this.handleChange1}/>\n             \t</div>\n             \t<div className=\"form-group\">\n              \t\t<label htmlFor=\"password\">Password</label>\n              \t\t<input type=\"password\" value = {this.state.password}  name=\"password\" placeholder=\"password\" onChange={this.handleChange2}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t</div>\n        \t<div className=\"footer\">\n          \t\t<button onClick={this.handleClick} type=\"button\" className=\"btn\">\n            \t\tLogin\n          \t\t</button>\n          \t</div>\n     \t </div>\n\t);\n}\t\n}\n\nexport default UserLogin;","import React from 'react';\nimport './style.scss';\nimport LoginImage from './LoginImage.svg'\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {userName:'', email:'', password:''};\n    this.handleChange1 = this.handleChange1.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n    this.handleChange3 = this.handleChange3.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n \n handleClick(e) {\n  console.log(this.state.userName);\n  console.log(this.state.email);\n  console.log(this.state.password);\n }\n\n handleChange1(e) {\n  this.setState({userName: e.target.value})\n }\n handleChange2(e) {\n  this.setState({email: e.target.value})\n }\n handleChange3(e) {\n  this.setState({password: e.target.value})\n }\n\nrender() {\n\treturn (\n\t\t<div className = 'outer-container' ref={this.props.containerRef}> \n\t\t\t<div className = 'header'> Register </div>\n      <div className=\"content\">\n\t\t\t<div className = 'form'>\n\t\t\t\t<div className = 'form-group'>\n\t\t\t\t\t<label htmlFor=\"username\">Username</label>\n          <input type=\"text\" value = {this.state.userName} name=\"username\" placeholder=\"username\" onChange={this.handleChange1}/>\n        </div>\n        <div className = 'form-group'>\n          <label htmlFor=\"email\">Email Address</label>\n          <input value = {this.state.email} type=\"text\" value = {this.state.email} name=\"Email Address\" placeholder=\"Email Address\" onChange={this.handleChange2}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password</label>\n        \t<input value = {this.state.password} type=\"password\" value = {this.state.password} name=\"password\" placeholder=\"password\" onChange={this.handleChange3} />\n\t\t\t\t</div>\n\t\t\t</div>\n      </div>\n      <div className=\"footer\">\n        <button onClick={this.handleClick} type=\"button\" className=\"btn\">\n        \tRegister\n        </button>\n      </div>\n    </div>\n\t);\n}\t\n}\n\nexport default Register;","import React from 'react';\nimport './App.css';\nimport UserLogin from './UserLogin';\nimport Register from './Register'\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      login: true\n    };\n  }\n\n  componentDidMount() {\n    this.rightSide.classList.add(\"right\");\n  }\n\n\nchangeState() {\n    const { login } = this.state;\n\n    if (login) {\n      this.rightSide.classList.remove(\"right\");\n      this.rightSide.classList.add(\"left\");\n    } else {\n      this.rightSide.classList.remove(\"left\");\n      this.rightSide.classList.add(\"right\");\n    }\n    this.setState(prevState => ({ login: !prevState.login }));\n  }\n\nrender() {\n    const {login} = this.state;\n    const curr = login ? \"Register\" : \"Login\";\n    const currentActive = login ? \"login\" : \"register\";\n  return (\n        <div className=\"App\">\n          <div className=\"login\">\n            <div className=\"container\" ref={ref => (this.container = ref)}>\n            {login && (\n                <UserLogin containerRef={ref => (this.curr = ref)} />\n              )}\n            {!login && (\n                <Register containerRef={ref => (this.curr = ref)} />\n              )}\n            </div>\n            <RightSide\n            curr={curr}\n            currentActive={currentActive}\n            containerRef={ref => (this.rightSide = ref)}\n            onClick={this.changeState.bind(this)}\n          />\n          </div>\n        </div>\n\n  );\n}\n}\n\nconst RightSide = props => {\n  return (\n    <div\n      className=\"right-side\"\n      ref={props.containerRef}\n      onClick={props.onClick}\n    >\n      <div className=\"inner-container\">\n        <div className=\"text\">{props.curr}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/LoginImage.110a99a1.svg\";"],"sourceRoot":""}